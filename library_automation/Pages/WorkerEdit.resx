<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pbxUploadImage.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        CzqKq05F13stAAAAAElFTkSuQmCC
</value>
  </data>
  <data name="pictureBtnBack.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        +x8HD31aFY98+AAAAABJRU5ErkJggg==
</value>
  </data>
</root>